<Window x:Class="Wysg.Musm.Radium.Views.SpyWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="UI Spy" Height="720" Width="1040"
        Background="#1E1E1E" Foreground="#D0D0D0" FontFamily="Consolas">
    <Window.Resources>
        <!-- Dark palette -->
        <SolidColorBrush x:Key="Dark.Background" Color="#1E1E1E"/>
        <SolidColorBrush x:Key="Dark.Panel" Color="#252526"/>
        <SolidColorBrush x:Key="Dark.Accent" Color="#2D2D30"/>
        <SolidColorBrush x:Key="Dark.Border" Color="#3C3C3C"/>
        <SolidColorBrush x:Key="Dark.Foreground" Color="#D0D0D0"/>
        <SolidColorBrush x:Key="Dark.ForegroundDim" Color="#B0B0B0"/>
        <SolidColorBrush x:Key="Dark.Hover" Color="#2F2F33"/>
        <SolidColorBrush x:Key="Dark.HoverBorder" Color="#5A5A5A"/>
        <SolidColorBrush x:Key="Dark.HoverOverlay" Color="#203A3A3D"/>
        <SolidColorBrush x:Key="Dark.Pressed" Color="#454549"/>

        <!-- Buttons -->
        <Style TargetType="Button">
            <Setter Property="Background" Value="{StaticResource Dark.Accent}"/>
            <Setter Property="Foreground" Value="{StaticResource Dark.Foreground}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Dark.Border}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Padding" Value="6,3"/>
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{StaticResource Dark.Pressed}"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" Value="{StaticResource Dark.Pressed}"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Foreground" Value="#808080"/>
                    <Setter Property="Background" Value="#2A2A2A"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- TextBox -->
        <Style x:Key="DarkTextBox" TargetType="TextBox">
            <Setter Property="Background" Value="{StaticResource Dark.Panel}"/>
            <Setter Property="Foreground" Value="{StaticResource Dark.Foreground}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Dark.Border}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="CaretBrush" Value="White"/>
        </Style>
        <Style TargetType="TextBox" BasedOn="{StaticResource DarkTextBox}"/>

        <!-- Transparent overlay ToggleButton template to remove default blue hover/press visuals -->
        <ControlTemplate x:Key="OverlayToggleTemplate" TargetType="ToggleButton">
            <Border Background="Transparent"/>
        </ControlTemplate>

        <!-- ComboBox template (arrow pinned, ultra-light hover; no opaque overlay) -->
        <Style TargetType="ComboBox">
            <Setter Property="Background" Value="{StaticResource Dark.Panel}"/>
            <Setter Property="Foreground" Value="{StaticResource Dark.Foreground}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Dark.Border}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ComboBox">
                        <Grid>
                            <Border x:Name="Bd" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" CornerRadius="2"/>
                            <!-- Subtle hover overlay placed beneath text, default transparent -->
                            <Border x:Name="HoverOverlay" Background="Transparent" CornerRadius="2"/>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="22"/>
                                </Grid.ColumnDefinitions>
                                <TextBlock Grid.Column="0" Margin="6,2,4,2" VerticalAlignment="Center" HorizontalAlignment="Left"
                                           Text="{Binding SelectionBoxItem, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                           Foreground="{TemplateBinding Foreground}" IsHitTestVisible="False"/>
                                <Border Grid.Column="1" Background="{StaticResource Dark.Accent}" IsHitTestVisible="False">
                                    <Path HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 4 4 L 8 0 Z" Fill="{StaticResource Dark.Foreground}"/>
                                </Border>
                                <ToggleButton x:Name="Toggle" Grid.ColumnSpan="2" Background="Transparent" BorderBrush="Transparent" BorderThickness="0"
                                              FocusVisualStyle="{x:Null}"
                                              Template="{StaticResource OverlayToggleTemplate}"
                                              IsChecked="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"/>
                            </Grid>
                            <Popup x:Name="PART_Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Fade">
                                <Border Background="{StaticResource Dark.Panel}" BorderBrush="{StaticResource Dark.Border}" BorderThickness="1" MinWidth="{Binding ActualWidth, RelativeSource={RelativeSource TemplatedParent}}">
                                    <ScrollViewer>
                                        <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained"/>
                                    </ScrollViewer>
                                </Border>
                            </Popup>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource Dark.HoverBorder}"/>
                                <Setter TargetName="HoverOverlay" Property="Background" Value="{StaticResource Dark.HoverOverlay}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="Bd" Property="Background" Value="#2A2A2A"/>
                                <Setter Property="Foreground" Value="#808080"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="ComboBoxItem">
            <Setter Property="Background" Value="{StaticResource Dark.Panel}"/>
            <Setter Property="Foreground" Value="{StaticResource Dark.Foreground}"/>
        </Style>

        <!-- CheckBox: brighter disabled check -->
        <Style x:Key="DarkCheckBox" TargetType="CheckBox">
            <Setter Property="Foreground" Value="{StaticResource Dark.Foreground}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="CheckBox">
                        <StackPanel Orientation="Horizontal">
                            <Border x:Name="Box" Width="14" Height="14" Background="{StaticResource Dark.Panel}" BorderBrush="{StaticResource Dark.Border}" BorderThickness="1" CornerRadius="2">
                                <Path x:Name="CheckMark" Visibility="Collapsed" Stroke="#E6E6E6" StrokeThickness="2" Data="M 2 8 L 6 12 L 12 3"/>
                            </Border>
                            <ContentPresenter Margin="6,0,0,0" VerticalAlignment="Center" RecognizesAccessKey="True"/>
                        </StackPanel>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="Box" Property="Background" Value="{StaticResource Dark.Accent}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="Box" Property="Background" Value="#2A2A2A"/>
                                <Setter TargetName="Box" Property="BorderBrush" Value="#3A3A3A"/>
                                <Setter TargetName="CheckMark" Property="Stroke" Value="#A8A8A8"/>
                                <Setter Property="Foreground" Value="#9B9B9B"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="CheckBox" BasedOn="{StaticResource DarkCheckBox}"/>

        <!-- ScrollBar -->
        <Style TargetType="ScrollBar">
            <Setter Property="Background" Value="{StaticResource Dark.Accent}"/>
            <Setter Property="Foreground" Value="{StaticResource Dark.Foreground}"/>
        </Style>

        <!-- TreeView dark styles -->
        <Style TargetType="TreeView">
            <Setter Property="Background" Value="{StaticResource Dark.Panel}"/>
            <Setter Property="Foreground" Value="{StaticResource Dark.Foreground}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Dark.Border}"/>
            <Setter Property="BorderThickness" Value="1"/>
        </Style>
        <Style TargetType="TreeViewItem">
            <Setter Property="Foreground" Value="{StaticResource Dark.Foreground}"/>
            <Setter Property="Background" Value="{StaticResource Dark.Panel}"/>
            <Style.Triggers>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background" Value="{StaticResource Dark.Hover}"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#2F2F33"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- DataGrid and headers/cells -->
        <Style TargetType="DataGrid">
            <Setter Property="Background" Value="{StaticResource Dark.Panel}"/>
            <Setter Property="Foreground" Value="{StaticResource Dark.Foreground}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Dark.Border}"/>
            <Setter Property="GridLinesVisibility" Value="All"/>
            <Setter Property="HorizontalGridLinesBrush" Value="{StaticResource Dark.Border}"/>
            <Setter Property="VerticalGridLinesBrush" Value="{StaticResource Dark.Border}"/>
            <Setter Property="RowBackground" Value="#222"/>
            <Setter Property="AlternatingRowBackground" Value="#262626"/>
        </Style>
        <Style TargetType="DataGridColumnHeader">
            <Setter Property="Background" Value="{StaticResource Dark.Accent}"/>
            <Setter Property="Foreground" Value="{StaticResource Dark.Foreground}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Dark.Border}"/>
        </Style>
        <Style TargetType="DataGridCell">
            <Setter Property="Background" Value="{StaticResource Dark.Panel}"/>
            <Setter Property="Foreground" Value="{StaticResource Dark.Foreground}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Dark.Border}"/>
        </Style>
        <Style TargetType="GroupBox">
            <Setter Property="Foreground" Value="{StaticResource Dark.Foreground}"/>
        </Style>
        <Style TargetType="TextBlock">
            <Setter Property="Foreground" Value="{StaticResource Dark.Foreground}"/>
        </Style>
    </Window.Resources>

    <Grid Margin="8">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <!-- Top bar -->
        <StackPanel Orientation="Horizontal" Grid.Row="0" Margin="0,0,0,8">
            <TextBlock Text="Process:" VerticalAlignment="Center" Margin="0,0,6,0"/>
            <TextBox x:Name="txtProcess" Width="160" Text=""/>
            <TextBlock Text="Delay(ms):" VerticalAlignment="Center" Margin="8,0,4,0"/>
            <TextBox x:Name="txtDelay" Width="60" Text="1500"/>
            <Button Content="Pick" Margin="8,0,0,0" Click="OnPick"/>
            <TextBlock Text="Map to:" Margin="12,0,6,0" VerticalAlignment="Center"/>
            <ComboBox x:Name="cmbKnown" Width="300" SelectionChanged="OnKnownSelectionChanged" SelectedValuePath="Tag">
                <ComboBoxItem Tag="StudyInfoBanner">Study info banner</ComboBoxItem>
                <ComboBoxItem Tag="RelatedStudyList">Related studies list</ComboBoxItem>
                <ComboBoxItem Tag="SelectedStudyInSearch">Selected study in search result</ComboBoxItem>
                <ComboBoxItem Tag="SelectedStudyInRelated">Selected study in related studies</ComboBoxItem>
                <ComboBoxItem Tag="CloseWorklistButton">Close worklist button</ComboBoxItem>
                <ComboBoxItem Tag="WorklistWindow">Worklist window</ComboBoxItem>
                <ComboBoxItem Tag="WorklistToolbar">Worklist toolbar</ComboBoxItem>
                <ComboBoxItem Tag="WorklistViewButton">Worklist view button</ComboBoxItem>
                <ComboBoxItem Tag="WorklistPane">Worklist pane</ComboBoxItem>
                <ComboBoxItem Tag="WorklistListsPane">Worklist lists pane</ComboBoxItem>
                <ComboBoxItem Tag="ReportPane">Report pane</ComboBoxItem>
                <ComboBoxItem Tag="StudyList">Study list</ComboBoxItem>
                <ComboBoxItem Tag="ReportText">Report text</ComboBoxItem>
                <ComboBoxItem Tag="ReportInput">Report input</ComboBoxItem>
                <ComboBoxItem Tag="ViewerWindow">Viewer window</ComboBoxItem>
                <ComboBoxItem Tag="ViewerToolbar">Viewer toolbar</ComboBoxItem>
                <ComboBoxItem Tag="OpenWorklistButton">Open worklist button</ComboBoxItem>
                <ComboBoxItem Tag="ReportCommitButton">Report commit button</ComboBoxItem>
            </ComboBox>
            <Button Content="Map" Margin="6,0,0,0" Click="OnMapSelected"/>
            <Button Content="Resolve" Margin="6,0,0,0" Click="OnResolveSelected"/>
            <Button Content="Reload" Margin="6,0,0,0" Click="OnReload"/>
        </StackPanel>

        <!-- Middle: Left tree + Right editor -->
        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="2*"/>
                <ColumnDefinition Width="3*"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>

            <!-- Left: Ancestry tree with properties at bottom -->
            <GroupBox Grid.Column="0" Header="Captured Ancestry (root -> target)" Margin="0,0,6,0">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>

                    <TreeView x:Name="tvAncestry" Grid.Row="0" SelectedItemChanged="OnAncestrySelected"
                              ScrollViewer.HorizontalScrollBarVisibility="Auto"
                              ScrollViewer.VerticalScrollBarVisibility="Auto">
                        <TreeView.ItemTemplate>
                            <HierarchicalDataTemplate ItemsSource="{Binding Children}">
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock Text="Class="/>
                                    <TextBlock Text="{Binding ClassName}" Margin="2,0"/>
                                    <TextBlock Text=", Ct="/>
                                    <TextBlock Text="{Binding ControlTypeId}" Margin="2,0"/>
                                    <TextBlock Text=", AutoId="/>
                                    <TextBlock Text="{Binding AutomationId}" Margin="2,0"/>
                                    <TextBlock Text=", Name="/>
                                    <TextBlock Text="{Binding Name}" Margin="2,0"/>
                                </StackPanel>
                            </HierarchicalDataTemplate>
                        </TreeView.ItemTemplate>
                    </TreeView>

                    <GroupBox Grid.Row="1" Header="Selected node properties" Margin="0,6,0,0">
                        <TextBox x:Name="txtNodeProps" IsReadOnly="True" TextWrapping="Wrap" AcceptsReturn="True" Height="90" VerticalScrollBarVisibility="Auto"
                                 Background="{StaticResource Dark.Panel}" Foreground="{StaticResource Dark.Foreground}" BorderBrush="{StaticResource Dark.Border}" BorderThickness="1"/>
                    </GroupBox>
                </Grid>
            </GroupBox>

            <!-- Right: Crawl editor -->
            <GroupBox Grid.Column="1" Header="Crawl Editor">
                <DockPanel>
                    <StackPanel Orientation="Horizontal" DockPanel.Dock="Top" Margin="0,0,0,6">
                        <TextBlock Text="Map Method:" VerticalAlignment="Center"/>
                        <ComboBox x:Name="cmbMethod" Width="150" Margin="6,0,12,0">
                            <ComboBoxItem Tag="Chain">Chain</ComboBoxItem>
                            <ComboBoxItem Tag="AutomationIdOnly">AutomationIdOnly</ComboBoxItem>
                        </ComboBox>
                        <TextBlock Text="Direct AutomationId:" VerticalAlignment="Center"/>
                        <TextBox x:Name="txtDirectId" Width="200" Margin="6,0,12,0"/>
                        <Button Content="Validate" Click="OnValidateChain"/>
                        <Button Content="Invoke" Margin="6,0,0,0" Click="OnInvoke"/>
                        <Button Content="Get Text" Margin="6,0,0,0" Click="OnGetText"/>
                        <Button Content="Row Data" Margin="6,0,0,0" Click="OnGetSelectedRow"/>
                        <Button Content="Save" Margin="6,0,0,0" Click="OnSaveEdited"/>
                        <Separator Margin="12,0" Width="10"/>
                        <Button Content="Move Up" Click="OnMoveUp"/>
                        <Button Content="Move Down" Margin="6,0,0,0" Click="OnMoveDown"/>
                        <Button Content="Insert Above" Margin="6,0,0,0" Click="OnInsertAbove"/>
                        <Button Content="Delete" Margin="6,0,0,0" Click="OnDeleteNode"/>
                    </StackPanel>

                    <DataGrid x:Name="gridChain" AutoGenerateColumns="False" HeadersVisibility="Column" CanUserAddRows="True" CanUserDeleteRows="True" IsReadOnly="False">
                        <DataGrid.Columns>
                            <DataGridTemplateColumn Header="Scope" Width="105">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <ComboBox SelectedIndex="{Binding LocateIndex, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="100">
                                            <ComboBoxItem Content="Exclude"/>
                                            <ComboBoxItem Content="Children"/>
                                            <ComboBoxItem Content="Descendants"/>
                                        </ComboBox>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTextColumn Header="Order" Binding="{Binding Order, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="80"/>
                            <DataGridTemplateColumn Header="Name" Width="220">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <StackPanel Orientation="Horizontal">
                                            <CheckBox IsChecked="{Binding UseName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center">
                                                <CheckBox.Style>
                                                    <Style TargetType="CheckBox" BasedOn="{StaticResource DarkCheckBox}">
                                                        <Setter Property="IsEnabled" Value="True"/>
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding LocateIndex}" Value="0">
                                                                <Setter Property="IsChecked" Value="False"/>
                                                                <Setter Property="IsEnabled" Value="False"/>
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </CheckBox.Style>
                                            </CheckBox>
                                            <TextBox Text="{Binding Name, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="160" Margin="6,0,0,0">
                                                <TextBox.Style>
                                                    <Style TargetType="TextBox" BasedOn="{StaticResource DarkTextBox}">
                                                        <Setter Property="IsEnabled" Value="True"/>
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding LocateIndex}" Value="0">
                                                                <Setter Property="Text" Value=""/>
                                                                <Setter Property="IsEnabled" Value="False"/>
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </TextBox.Style>
                                            </TextBox>
                                        </StackPanel>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTemplateColumn Header="ClassName" Width="260">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <StackPanel Orientation="Horizontal">
                                            <CheckBox IsChecked="{Binding UseClassName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center">
                                                <CheckBox.Style>
                                                    <Style TargetType="CheckBox" BasedOn="{StaticResource DarkCheckBox}">
                                                        <Setter Property="IsEnabled" Value="True"/>
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding LocateIndex}" Value="0">
                                                                <Setter Property="IsChecked" Value="False"/>
                                                                <Setter Property="IsEnabled" Value="False"/>
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </CheckBox.Style>
                                            </CheckBox>
                                            <TextBox Text="{Binding ClassName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="180" Margin="6,0,0,0">
                                                <TextBox.Style>
                                                    <Style TargetType="TextBox" BasedOn="{StaticResource DarkTextBox}">
                                                        <Setter Property="IsEnabled" Value="True"/>
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding LocateIndex}" Value="0">
                                                                <Setter Property="Text" Value=""/>
                                                                <Setter Property="IsEnabled" Value="False"/>
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </TextBox.Style>
                                            </TextBox>
                                        </StackPanel>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTemplateColumn Header="ControlTypeId" Width="180">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <StackPanel Orientation="Horizontal">
                                            <CheckBox IsChecked="{Binding UseControlTypeId, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center">
                                                <CheckBox.Style>
                                                    <Style TargetType="CheckBox" BasedOn="{StaticResource DarkCheckBox}">
                                                        <Setter Property="IsEnabled" Value="True"/>
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding LocateIndex}" Value="0">
                                                                <Setter Property="IsChecked" Value="False"/>
                                                                <Setter Property="IsEnabled" Value="False"/>
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </CheckBox.Style>
                                            </CheckBox>
                                            <TextBox Text="{Binding ControlTypeId, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="100" Margin="6,0,0,0">
                                                <TextBox.Style>
                                                    <Style TargetType="TextBox" BasedOn="{StaticResource DarkTextBox}">
                                                        <Setter Property="IsEnabled" Value="True"/>
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding LocateIndex}" Value="0">
                                                                <Setter Property="Text" Value=""/>
                                                                <Setter Property="IsEnabled" Value="False"/>
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </TextBox.Style>
                                            </TextBox>
                                        </StackPanel>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTemplateColumn Header="AutomationId" Width="240">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <StackPanel Orientation="Horizontal">
                                            <CheckBox IsChecked="{Binding UseAutomationId, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center">
                                                <CheckBox.Style>
                                                    <Style TargetType="CheckBox" BasedOn="{StaticResource DarkCheckBox}">
                                                        <Setter Property="IsEnabled" Value="True"/>
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding LocateIndex}" Value="0">
                                                                <Setter Property="IsChecked" Value="False"/>
                                                                <Setter Property="IsEnabled" Value="False"/>
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </CheckBox.Style>
                                            </CheckBox>
                                            <TextBox Text="{Binding AutomationId, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="160" Margin="6,0,0,0">
                                                <TextBox.Style>
                                                    <Style TargetType="TextBox" BasedOn="{StaticResource DarkTextBox}">
                                                        <Setter Property="IsEnabled" Value="True"/>
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding LocateIndex}" Value="0">
                                                                <Setter Property="Text" Value=""/>
                                                                <Setter Property="IsEnabled" Value="False"/>
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </TextBox.Style>
                                            </TextBox>
                                        </StackPanel>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTemplateColumn Header="Index" Width="70">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <StackPanel Orientation="Horizontal">
                                            <CheckBox IsChecked="{Binding UseIndex, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center">
                                                <CheckBox.Style>
                                                    <Style TargetType="CheckBox" BasedOn="{StaticResource DarkCheckBox}">
                                                        <Setter Property="IsEnabled" Value="True"/>
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding LocateIndex}" Value="0">
                                                                <Setter Property="IsChecked" Value="False"/>
                                                                <Setter Property="IsEnabled" Value="False"/>
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </CheckBox.Style>
                                            </CheckBox>
                                            <TextBox Text="{Binding IndexAmongMatches, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="40" Margin="6,0,0,0">
                                                <TextBox.Style>
                                                    <Style TargetType="TextBox" BasedOn="{StaticResource DarkTextBox}">
                                                        <Setter Property="IsEnabled" Value="True"/>
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding LocateIndex}" Value="0">
                                                                <Setter Property="Text" Value="0"/>
                                                                <Setter Property="IsEnabled" Value="False"/>
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </TextBox.Style>
                                            </TextBox>
                                        </StackPanel>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                        </DataGrid.Columns>
                    </DataGrid>
                </DockPanel>
            </GroupBox>
        </Grid>

        <!-- Bottom status -->
        <TextBox Grid.Row="2" x:Name="txtStatus" IsReadOnly="True"
                 Background="{StaticResource Dark.Panel}" Foreground="{StaticResource Dark.Foreground}" BorderBrush="{StaticResource Dark.Border}" BorderThickness="1"
                 TextWrapping="Wrap" AcceptsReturn="True" Height="120" VerticalScrollBarVisibility="Auto"/>
    </Grid>
</Window>