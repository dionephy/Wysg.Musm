<Window x:Class="Wysg.Musm.Radium.Views.SettingsWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:views="clr-namespace:Wysg.Musm.Radium.Views"
        Title="Settings" Height="780" Width="1020" WindowStartupLocation="CenterOwner" Background="#1E1E1E" Foreground="#E8E8E8">
    <Grid Margin="12">
        <Grid.Resources>
            <!-- Neutral palette constants (for higher contrast) -->
            <Color x:Key="ClrSurface">#262A30</Color>
            <Color x:Key="ClrSurfaceAlt">#30353D</Color>
            <Color x:Key="ClrAccent">#4C8DFF</Color>
            <Color x:Key="ClrAccentAlt">#2F6DD0</Color>
            <SolidColorBrush x:Key="BrushSurface" Color="{StaticResource ClrSurface}"/>
            <SolidColorBrush x:Key="BrushSurfaceAlt" Color="{StaticResource ClrSurfaceAlt}"/>
            <SolidColorBrush x:Key="BrushAccent" Color="{StaticResource ClrAccent}"/>
            <SolidColorBrush x:Key="BrushAccentAlt" Color="{StaticResource ClrAccentAlt}"/>
            <SolidColorBrush x:Key="BrushBorder" Color="#454A52"/>
            <SolidColorBrush x:Key="BrushBorderLight" Color="#5A616B"/>
            <SolidColorBrush x:Key="BrushTextPrimary" Color="#F5F6F7"/>
            <SolidColorBrush x:Key="BrushTextSecondary" Color="#C8C8C8"/>
            <SolidColorBrush x:Key="BrushTabHeader" Color="#FFE4E4E4"/>
            <SolidColorBrush x:Key="BrushTabHeaderSelected" Color="#FF3E3E3E"/>

            <!-- Converter for Active boolean to button text -->
            <views:ActiveToButtonTextConverter x:Key="ActiveToButtonTextConverter"/>

            <!-- Button / TextBox styles (brightened) -->
            <Style TargetType="Button">
                <Setter Property="Background" Value="{StaticResource BrushSurfaceAlt}"/>
                <Setter Property="Foreground" Value="{StaticResource BrushTextPrimary}"/>
                <Setter Property="BorderBrush" Value="{StaticResource BrushBorder}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Padding" Value="8,4"/>
                <Setter Property="Margin" Value="6,0,0,2"/>
                <Setter Property="FontSize" Value="13"/>
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="{StaticResource BrushAccent}"/>
                        <Setter Property="BorderBrush" Value="{StaticResource BrushAccentAlt}"/>
                    </Trigger>
                    <Trigger Property="IsPressed" Value="True">
                        <Setter Property="Background" Value="{StaticResource BrushAccentAlt}"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Opacity" Value="0.45"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style TargetType="TextBox">
                <Setter Property="Background" Value="{StaticResource BrushSurfaceAlt}"/>
                <Setter Property="Foreground" Value="{StaticResource BrushTextPrimary}"/>
                <Setter Property="BorderBrush" Value="{StaticResource BrushBorderLight}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Padding" Value="4"/>
            </Style>
            <Style TargetType="ListBox">
                <Setter Property="Background" Value="{StaticResource BrushSurface}"/>
                <Setter Property="BorderBrush" Value="{StaticResource BrushBorder}"/>
                <Setter Property="Foreground" Value="{StaticResource BrushTextPrimary}"/>
            </Style>
            <Style TargetType="TextBlock">
                <Setter Property="Foreground" Value="{StaticResource BrushTextSecondary}"/>
            </Style>
            <Style TargetType="Expander">
                <Setter Property="Background" Value="{StaticResource BrushSurface}"/>
                <Setter Property="Foreground" Value="{StaticResource BrushTextPrimary}"/>
                <Setter Property="BorderBrush" Value="{StaticResource BrushBorder}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Margin" Value="0,4,0,0"/>
            </Style>
            <Style TargetType="CheckBox">
                <Setter Property="Foreground" Value="{StaticResource BrushTextPrimary}"/>
                <Setter Property="Margin" Value="0,0,0,2"/>
            </Style>
            <Style TargetType="TabControl">
                <Setter Property="Foreground" Value="{StaticResource BrushTabHeader}"/>
            </Style>
            <Style TargetType="TabItem">
                <Setter Property="Foreground" Value="{StaticResource BrushTabHeader}"/>
                <Setter Property="Padding" Value="14,6"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="Background" Value="#24282E"/>
                <Style.Triggers>
                    <Trigger Property="IsSelected" Value="True">
                        <Setter Property="Foreground" Value="{StaticResource BrushTabHeaderSelected}"/>
                        <Setter Property="Background" Value="#2E333A"/>
                        <Setter Property="BorderBrush" Value="{StaticResource BrushAccent}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
            <!-- DataTemplates required by Automation tab -->
            <DataTemplate x:Key="OrderedModuleTemplate">
                <Border BorderBrush="{StaticResource BrushBorder}" BorderThickness="1" CornerRadius="2" Padding="4" Margin="0,2,0,2" Background="{StaticResource BrushSurfaceAlt}">
                    <DockPanel>
                        <Button Content="X" DockPanel.Dock="Right" Width="22" Height="22" Margin="4,0,0,0" Padding="0" CommandParameter="{Binding}" Tag="removeBtn" ToolTip="Remove module" Click="OnRemoveModuleClick"/>
                        <TextBlock Text="{Binding}"/>
                    </DockPanel>
                </Border>
            </DataTemplate>
            <DataTemplate x:Key="LibraryModuleTemplate">
                <Border BorderBrush="{StaticResource BrushBorder}" BorderThickness="1" CornerRadius="2" Padding="4" Margin="0,2,0,2" Background="{StaticResource BrushSurface}">
                    <TextBlock Text="{Binding}"/>
                </Border>
            </DataTemplate>
        </Grid.Resources>

        <TabControl Background="#1E1E1E" x:Name="tabsRoot">
            <!-- Database -->
            <TabItem Header="Database" x:Name="tabDatabase">
                <Grid Margin="8">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Grid.Row="0" Grid.Column="0" Text="Local/Intranet Connection String:" VerticalAlignment="Center" Margin="0,0,8,4"/>
                    <TextBox Grid.Row="0" Grid.Column="1" Text="{Binding LocalConnectionString, UpdateSourceTrigger=PropertyChanged}" MinWidth="520"/>
                    <TextBlock Grid.Row="1" Grid.Column="0" Text="Central (Azure SQL) Connection String:" VerticalAlignment="Center" Margin="0,4,8,4"/>
                    <TextBox Grid.Row="1" Grid.Column="1" MinWidth="520" ToolTip="Paste AAD passwordless connection string (Authentication=Active Directory Default)"
                             Text="{Binding CentralConnectionString, UpdateSourceTrigger=PropertyChanged}" />
                    <StackPanel Grid.Row="2" Grid.ColumnSpan="2" Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,12,0,0">
                        <Button Content="Test Local" Width="100" Margin="0,0,8,0" Command="{Binding TestLocalCommand}"/>
                        <Button Content="Test Central" Width="110" Margin="0,0,8,0" Command="{Binding TestCentralCommand}"/>
                        <Button Content="Save" Width="90" Margin="0,0,8,0" Command="{Binding SaveCommand}"/>
                        <Button Content="Close" Width="90" IsCancel="True"/>
                    </StackPanel>
                    <TextBlock Grid.Row="3" Grid.ColumnSpan="2" Text="Tip: Central string can omit password when using Azure AD (Active Directory Default)." Foreground="#9AA0A6"/>
                </Grid>
            </TabItem>

            <!-- Automation -->
            <TabItem Header="Automation" x:Name="tabAutomation">
                <Grid Margin="8">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <TextBlock Text="Drag modules between panes to configure execution order (duplicates allowed)." FontWeight="Bold" Foreground="{StaticResource BrushTextPrimary}"/>
                    <Grid Grid.Row="1" Margin="0,8,0,0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Border Grid.Column="0" BorderBrush="{StaticResource BrushBorder}" BorderThickness="1" CornerRadius="4" Padding="6" Background="{StaticResource BrushSurface}" Margin="0,0,8,0">
                            <DockPanel>
                                <TextBlock DockPanel.Dock="Top" Text="New Study" FontWeight="SemiBold" Margin="0,0,0,4" Foreground="{StaticResource BrushTextPrimary}"/>
                                <ListBox x:Name="lstNewStudy" AllowDrop="True" PreviewMouseMove="OnProcDrag" Drop="OnProcDrop" DragLeave="OnListDragLeave" Tag="NewStudy" ItemTemplate="{StaticResource OrderedModuleTemplate}"/>
                            </DockPanel>
                        </Border>
                        <Border Grid.Column="1" BorderBrush="{StaticResource BrushBorder}" BorderThickness="1" CornerRadius="4" Padding="6" Background="{StaticResource BrushSurface}" Margin="0,0,8,0">
                            <DockPanel>
                                <TextBlock DockPanel.Dock="Top" Text="Add Study" FontWeight="SemiBold" Margin="0,0,0,4" Foreground="{StaticResource BrushTextPrimary}"/>
                                <ListBox x:Name="lstAddStudy" AllowDrop="True" PreviewMouseMove="OnProcDrag" Drop="OnProcDrop" DragLeave="OnListDragLeave" Tag="AddStudy" ItemTemplate="{StaticResource OrderedModuleTemplate}"/>
                            </DockPanel>
                        </Border>
                        <Border Grid.Column="2" BorderBrush="{StaticResource BrushBorder}" BorderThickness="1" CornerRadius="4" Padding="6" Background="{StaticResource BrushSurface}">
                            <DockPanel>
                                <TextBlock DockPanel.Dock="Top" Text="Available Modules" FontWeight="SemiBold" Margin="0,0,0,4" Foreground="{StaticResource BrushTextPrimary}"/>
                                <ListBox x:Name="lstLibrary" PreviewMouseMove="OnProcDrag" DragLeave="OnListDragLeave" Tag="Library" ItemTemplate="{StaticResource LibraryModuleTemplate}"/>
                            </DockPanel>
                        </Border>
                    </Grid>
                    <StackPanel Grid.Row="2" Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,8,0,0">
                        <Button Content="Save Automation" Command="{Binding SaveAutomationCommand}" Width="140" Margin="0,0,8,0"/>
                        <Button Content="Close" Width="90" IsCancel="True"/>
                    </StackPanel>
                </Grid>
            </TabItem>

            <!-- Reportify -->
            <TabItem Header="Reportify" x:Name="tabReportify">
                <Grid Margin="8">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="240"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <TextBlock Text="Reportify Formatting (Preview Skeleton)" FontWeight="Bold" Foreground="{StaticResource BrushTextPrimary}"/>
                    <ScrollViewer Grid.Row="1" VerticalScrollBarVisibility="Auto" Background="{StaticResource BrushSurface}">
                        <StackPanel Orientation="Vertical" Margin="0,8,0,0">
                            <!-- Core Normalization -->
                            <Expander Header="Core Normalization" IsExpanded="True">
                                <StackPanel>
                                    <StackPanel Orientation="Horizontal">
                                        <CheckBox Content="Remove excessive blanks" IsChecked="{Binding RemoveExcessiveBlanks}"/>
                                        <Button Content="Hint" Command="{Binding ShowReportifySampleCommand}" CommandParameter="remove_excessive_blanks"/>
                                    </StackPanel>
                                    <StackPanel Orientation="Horizontal">
                                        <CheckBox Content="Remove excessive blank lines" IsChecked="{Binding RemoveExcessiveBlankLines}"/>
                                        <Button Content="Hint" Command="{Binding ShowReportifySampleCommand}" CommandParameter="remove_excessive_blank_lines"/>
                                    </StackPanel>
                                    <StackPanel Orientation="Horizontal">
                                        <CheckBox Content="Collapse whitespace" IsChecked="{Binding CollapseWhitespace}"/>
                                        <Button Content="Hint" Command="{Binding ShowReportifySampleCommand}" CommandParameter="collapse_whitespace"/>
                                    </StackPanel>
                                </StackPanel>
                            </Expander>
                            <!-- Sentence Formatting -->
                            <Expander Header="Sentence Formatting" IsExpanded="True">
                                <StackPanel>
                                    <StackPanel Orientation="Horizontal">
                                        <CheckBox Content="Capitalize first letter" IsChecked="{Binding CapitalizeSentence}"/>
                                        <Button Content="Hint" Command="{Binding ShowReportifySampleCommand}" CommandParameter="capitalize_sentence"/>
                                    </StackPanel>
                                    <StackPanel Orientation="Horizontal">
                                        <CheckBox Content="Ensure trailing period" IsChecked="{Binding EnsureTrailingPeriod}"/>
                                        <Button Content="Hint" Command="{Binding ShowReportifySampleCommand}" CommandParameter="ensure_trailing_period"/>
                                    </StackPanel>
                                    <StackPanel Orientation="Horizontal">
                                        <CheckBox Content="Preserve known tokens" IsChecked="{Binding PreserveKnownTokens}"/>
                                        <Button Content="Hint" Command="{Binding ShowReportifySampleCommand}" CommandParameter="preserve_known_tokens"/>
                                    </StackPanel>
                                </StackPanel>
                            </Expander>
                            <!-- Symbols & Punctuation -->
                            <Expander Header="Symbols &amp; Punctuation">
                                <StackPanel>
                                    <StackPanel Orientation="Horizontal">
                                        <CheckBox Content="Normalize arrows" IsChecked="{Binding NormalizeArrows}"/>
                                        <Button Content="Hint" Command="{Binding ShowReportifySampleCommand}" CommandParameter="normalize_arrows"/>
                                    </StackPanel>
                                    <StackPanel Orientation="Horizontal">
                                        <CheckBox Content="Normalize bullets" IsChecked="{Binding NormalizeBullets}"/>
                                        <Button Content="Hint" Command="{Binding ShowReportifySampleCommand}" CommandParameter="normalize_bullets"/>
                                    </StackPanel>
                                    <StackPanel Orientation="Horizontal">
                                        <CheckBox Content="Space after punctuation" IsChecked="{Binding SpaceAfterPunctuation}"/>
                                        <Button Content="Hint" Command="{Binding ShowReportifySampleCommand}" CommandParameter="space_after_punctuation"/>
                                    </StackPanel>
                                    <StackPanel Orientation="Horizontal">
                                        <CheckBox Content="Normalize parentheses" IsChecked="{Binding NormalizeParentheses}"/>
                                        <Button Content="Hint" Command="{Binding ShowReportifySampleCommand}" CommandParameter="normalize_parentheses"/>
                                    </StackPanel>
                                    <StackPanel Orientation="Horizontal">
                                        <CheckBox Content="Space number + unit" IsChecked="{Binding SpaceNumberUnit}"/>
                                        <Button Content="Hint" Command="{Binding ShowReportifySampleCommand}" CommandParameter="space_number_unit"/>
                                    </StackPanel>
                                </StackPanel>
                            </Expander>
                            <!-- Conclusion Numbering -->
                            <Expander Header="Conclusion Numbering">
                                <StackPanel>
                                    <StackPanel Orientation="Horizontal">
                                        <CheckBox Content="Number conclusion paragraphs" IsChecked="{Binding NumberConclusionParagraphs}"/>
                                        <Button Content="Hint" Command="{Binding ShowReportifySampleCommand}" CommandParameter="number_conclusion_paragraphs"/>
                                    </StackPanel>
                                    <StackPanel Orientation="Horizontal">
                                        <CheckBox Content="Indent continuation lines" IsChecked="{Binding IndentContinuationLines}"/>
                                        <Button Content="Hint" Command="{Binding ShowReportifySampleCommand}" CommandParameter="indent_continuation_lines"/>
                                    </StackPanel>
                                </StackPanel>
                            </Expander>
                            <!-- Defaults -->
                            <Expander Header="Defaults">
                                <Grid Margin="0,4,0,0">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="240"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <TextBlock Grid.Row="0" Grid.Column="0" Text="Default arrow" VerticalAlignment="Center"/>
                                    <TextBox Grid.Row="0" Grid.Column="1" Margin="4,2,0,2" Text="{Binding DefaultArrow}"/>
                                    <TextBlock Grid.Row="1" Grid.Column="0" Text="Default conclusion numbering" VerticalAlignment="Center"/>
                                    <TextBox Grid.Row="1" Grid.Column="1" Margin="4,2,0,2" Text="{Binding DefaultConclusionNumbering}"/>
                                    <TextBlock Grid.Row="2" Grid.Column="0" Text="Default detailing prefix" VerticalAlignment="Center"/>
                                    <TextBox Grid.Row="2" Grid.Column="1" Margin="4,2,0,2" Text="{Binding DefaultDetailingPrefix}"/>
                                </Grid>
                            </Expander>
                            <Border Margin="0,12,0,0" Padding="10" Background="{StaticResource BrushSurfaceAlt}" BorderBrush="{StaticResource BrushBorderLight}" BorderThickness="1" CornerRadius="4">
                                <TextBlock Text="Use checkboxes to toggle options; click hint buttons to preview single-option transformations. Non-functional skeleton." TextWrapping="Wrap" Foreground="{StaticResource BrushTextSecondary}"/>
                            </Border>
                        </StackPanel>
                    </ScrollViewer>

                    <!-- Preview area -->
                    <Grid Grid.Row="2" Margin="0,8,0,0">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Grid.Row="0" Grid.Column="0" Text="Sample Before" FontWeight="SemiBold" Foreground="{StaticResource BrushTextPrimary}"/>
                        <TextBlock Grid.Row="0" Grid.Column="1" Text="Sample After" FontWeight="SemiBold" Foreground="{StaticResource BrushTextPrimary}"/>
                        <TextBlock Grid.Row="0" Grid.Column="2" Text="Settings JSON" FontWeight="SemiBold" Foreground="{StaticResource BrushTextPrimary}"/>
                        <TextBox Grid.Row="1" Grid.Column="0" Text="{Binding SampleBeforeText}" AcceptsReturn="True" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" Background="#202429" Foreground="#F0F0F0" FontFamily="Consolas"/>
                        <TextBox Grid.Row="1" Grid.Column="1" Text="{Binding SampleAfterText}" AcceptsReturn="True" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" Background="#202429" Foreground="#8FFFA8" FontFamily="Consolas"/>
                        <TextBox Grid.Row="1" Grid.Column="2" Text="{Binding ReportifySettingsJson, Mode=OneWay}" IsReadOnly="True" AcceptsReturn="True" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" Background="#202429" Foreground="#F0F0F0" FontFamily="Consolas"/>
                    </Grid>

                    <StackPanel Grid.Row="3" Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,12,0,0">
                        <Button Content="Save Settings" Width="120" Command="{Binding SaveReportifySettingsCommand}" IsEnabled="{Binding IsAccountValid}"/>
                        <Button Content="Close" Width="100" IsCancel="True" Margin="8,0,0,0"/>
                    </StackPanel>
                </Grid>
            </TabItem>

            <!-- Phrases (merged from standalone PhrasesWindow) -->
            <TabItem Header="Phrases" x:Name="tabPhrases">
                <Grid x:Name="phrasesRoot" Margin="8" Loaded="OnPhrasesTabLoaded">
                    <Grid.Resources>
                        <SolidColorBrush x:Key="PhrasePanel" Color="#262A30"/>
                        <SolidColorBrush x:Key="PhrasePanelAlt" Color="#2F343A"/>
                        <SolidColorBrush x:Key="PhraseBorder" Color="#41474F"/>
                        <SolidColorBrush x:Key="PhraseSelection" Color="#0E4D7A"/>
                        <Style TargetType="DataGrid" x:Key="PhraseGridStyle">
                            <Setter Property="Background" Value="{StaticResource PhrasePanel}"/>
                            <Setter Property="Foreground" Value="#E0E0E0"/>
                            <Setter Property="BorderBrush" Value="{StaticResource PhraseBorder}"/>
                            <Setter Property="RowBackground" Value="#262A30"/>
                            <Setter Property="AlternatingRowBackground" Value="#22272C"/>
                            <Setter Property="GridLinesVisibility" Value="None"/>
                            <Setter Property="SelectionMode" Value="Single"/>
                            <Setter Property="SelectionUnit" Value="FullRow"/>
                        </Style>
                        <Style TargetType="DataGridColumnHeader" x:Key="PhraseHeaderStyle">
                            <Setter Property="Background" Value="#30363D"/>
                            <Setter Property="Foreground" Value="#E0E0E0"/>
                            <Setter Property="BorderBrush" Value="#41474F"/>
                            <Setter Property="BorderThickness" Value="0 0 1 1"/>
                            <Setter Property="Padding" Value="6 4"/>
                        </Style>
                        <Style TargetType="DataGridRow" x:Key="PhraseRowStyle">
                            <Setter Property="BorderBrush" Value="#30363D"/>
                            <Setter Property="BorderThickness" Value="0 0 0 1"/>
                            <Style.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="Background" Value="{StaticResource PhraseSelection}"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                        <Style TargetType="TextBox" x:Key="PhraseInputBox">
                            <Setter Property="Background" Value="#202429"/>
                            <Setter Property="Foreground" Value="#F5F6F7"/>
                            <Setter Property="BorderBrush" Value="#41474F"/>
                            <Setter Property="BorderThickness" Value="1"/>
                            <Setter Property="Padding" Value="4"/>
                            <Setter Property="FontFamily" Value="Consolas"/>
                        </Style>
                        <Style TargetType="Button" x:Key="PhraseButton" BasedOn="{StaticResource {x:Type Button}}">
                            <Setter Property="Background" Value="#2F343A"/>
                            <Setter Property="Foreground" Value="#E0E0E0"/>
                            <Setter Property="BorderBrush" Value="#41474F"/>
                            <Setter Property="Margin" Value="6 0 0 0"/>
                            <Setter Property="Padding" Value="8 4"/>
                        </Style>
                    </Grid.Resources>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>

                    <StackPanel Orientation="Horizontal" Grid.Row="0" Margin="0 0 0 8">
                        <TextBox Width="360" Style="{StaticResource PhraseInputBox}" Text="{Binding NewText, UpdateSourceTrigger=PropertyChanged}"/>
                        <Button Style="{StaticResource PhraseButton}" Content="Add / Activate" Command="{Binding AddCommand}"/>
                        <Button Style="{StaticResource PhraseButton}" Content="Refresh" Command="{Binding RefreshCommand}"/>
                    </StackPanel>

                    <DataGrid Grid.Row="1" ItemsSource="{Binding Items}" AutoGenerateColumns="False" CanUserAddRows="False" HeadersVisibility="Column" IsReadOnly="False" RowHeaderWidth="0" Margin="0 0 0 8"
                              Style="{StaticResource PhraseGridStyle}" RowStyle="{StaticResource PhraseRowStyle}" ColumnHeaderStyle="{StaticResource PhraseHeaderStyle}">
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="Id" Binding="{Binding Id}" Width="60" IsReadOnly="True"/>
                            <DataGridTextColumn Header="Text" Binding="{Binding Text}" Width="*" IsReadOnly="True"/>
                            <DataGridCheckBoxColumn Header="Active" Binding="{Binding Active, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="70"/>
                            <DataGridTextColumn Header="Updated" Binding="{Binding UpdatedAt}" Width="140" IsReadOnly="True"/>
                            <DataGridTextColumn Header="Rev" Binding="{Binding Rev}" Width="80" IsReadOnly="True"/>
                            <DataGridCheckBoxColumn Header="Global" Binding="{Binding IsGlobal, Mode=OneWay}" Width="70" IsReadOnly="True"/>
                        </DataGrid.Columns>
                    </DataGrid>

                    <TextBlock Grid.Row="2" Text="Changes auto-save through phrase commands. Standalone window removed." Foreground="#9AA0A6" TextWrapping="Wrap"/>
                </Grid>
            </TabItem>

            <!-- Hotkeys -->
            <TabItem Header="Hotkeys" x:Name="tabHotkeys">
                <Grid x:Name="hotkeysRoot" Margin="8" Loaded="OnHotkeysTabLoaded">
                    <Grid.Resources>
                        <SolidColorBrush x:Key="HotkeyPanel" Color="#262A30"/>
                        <SolidColorBrush x:Key="HotkeyPanelAlt" Color="#2F343A"/>
                        <SolidColorBrush x:Key="HotkeyBorder" Color="#41474F"/>
                        <SolidColorBrush x:Key="HotkeySelection" Color="#0E4D7A"/>
                        <Style TargetType="DataGrid" x:Key="HotkeyGridStyle">
                            <Setter Property="Background" Value="{StaticResource HotkeyPanel}"/>
                            <Setter Property="Foreground" Value="#E0E0E0"/>
                            <Setter Property="BorderBrush" Value="{StaticResource HotkeyBorder}"/>
                            <Setter Property="RowBackground" Value="#262A30"/>
                            <Setter Property="AlternatingRowBackground" Value="#22272C"/>
                            <Setter Property="GridLinesVisibility" Value="None"/>
                            <Setter Property="SelectionMode" Value="Single"/>
                            <Setter Property="SelectionUnit" Value="FullRow"/>
                        </Style>
                        <Style TargetType="DataGridColumnHeader" x:Key="HotkeyHeaderStyle">
                            <Setter Property="Background" Value="#30363D"/>
                            <Setter Property="Foreground" Value="#E0E0E0"/>
                            <Setter Property="BorderBrush" Value="#41474F"/>
                            <Setter Property="BorderThickness" Value="0 0 1 1"/>
                            <Setter Property="Padding" Value="6 4"/>
                        </Style>
                        <Style TargetType="DataGridRow" x:Key="HotkeyRowStyle">
                            <Setter Property="BorderBrush" Value="#30363D"/>
                            <Setter Property="BorderThickness" Value="0 0 0 1"/>
                            <Style.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="Background" Value="{StaticResource HotkeySelection}"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                        <Style TargetType="TextBox" x:Key="HotkeyInputBox">
                            <Setter Property="Background" Value="#202429"/>
                            <Setter Property="Foreground" Value="#F5F6F7"/>
                            <Setter Property="BorderBrush" Value="#41474F"/>
                            <Setter Property="BorderThickness" Value="1"/>
                            <Setter Property="Padding" Value="4"/>
                            <Setter Property="FontFamily" Value="Consolas"/>
                        </Style>
                        <Style TargetType="Button" x:Key="HotkeyButton" BasedOn="{StaticResource {x:Type Button}}">
                            <Setter Property="Background" Value="#2F343A"/>
                            <Setter Property="Foreground" Value="#E0E0E0"/>
                            <Setter Property="BorderBrush" Value="#41474F"/>
                            <Setter Property="Margin" Value="6 0 0 0"/>
                            <Setter Property="Padding" Value="8 4"/>
                        </Style>
                    </Grid.Resources>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>

                    <TextBlock Grid.Row="0" Text="Hotkeys (Text Expansion Shortcuts)" FontWeight="Bold" FontSize="14" Foreground="{StaticResource BrushTextPrimary}" Margin="0,0,0,8"/>

                    <Grid Grid.Row="1" Margin="0,0,0,8">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <TextBlock Grid.Row="0" Grid.Column="0" Text="Trigger:" VerticalAlignment="Center" Margin="0,0,8,4" Foreground="{StaticResource BrushTextPrimary}"/>
                        <TextBox Grid.Row="0" Grid.Column="1" Text="{Binding TriggerText, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource HotkeyInputBox}" Margin="0,0,0,4"/>
                        <Button Grid.Row="0" Grid.Column="2" Style="{StaticResource HotkeyButton}" Content="Add" Command="{Binding AddCommand}" Margin="6,0,0,4"/>

                        <TextBlock Grid.Row="1" Grid.Column="0" Text="Expansion:" VerticalAlignment="Top" Margin="0,0,8,0" Foreground="{StaticResource BrushTextPrimary}"/>
                        <TextBox Grid.Row="1" Grid.Column="1" Text="{Binding ExpansionText, UpdateSourceTrigger=PropertyChanged}" AcceptsReturn="True" TextWrapping="Wrap" Height="60" VerticalScrollBarVisibility="Auto" Style="{StaticResource HotkeyInputBox}"/>
                        <Button Grid.Row="1" Grid.Column="2" Style="{StaticResource HotkeyButton}" Content="Delete Selected" Command="{Binding DeleteCommand}" VerticalAlignment="Top"/>

                        <TextBlock Grid.Row="2" Grid.ColumnSpan="3" Text="Tip: Type trigger text in editors followed by space or punctuation to expand. Example: 'bll' expands to 'bilateral leukoaraiosis'" Foreground="#9AA0A6" Margin="0,8,0,0" TextWrapping="Wrap"/>
                    </Grid>

                    <DataGrid Grid.Row="2" ItemsSource="{Binding Items}" SelectedItem="{Binding SelectedItem, Mode=TwoWay}" AutoGenerateColumns="False" CanUserAddRows="False" HeadersVisibility="Column" IsReadOnly="False" RowHeaderWidth="0" Margin="0,0,0,8"
                              Style="{StaticResource HotkeyGridStyle}" RowStyle="{StaticResource HotkeyRowStyle}" ColumnHeaderStyle="{StaticResource HotkeyHeaderStyle}">
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="Id" Binding="{Binding HotkeyId}" Width="60" IsReadOnly="True"/>
                            <DataGridTextColumn Header="Trigger" Binding="{Binding TriggerText}" Width="120" IsReadOnly="True"/>
                            <DataGridTextColumn Header="Expansion Preview" Binding="{Binding ExpansionText}" Width="*" IsReadOnly="True">
                                <DataGridTextColumn.ElementStyle>
                                    <Style TargetType="TextBlock">
                                        <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
                                        <Setter Property="ToolTip" Value="{Binding ExpansionText}"/>
                                    </Style>
                                </DataGridTextColumn.ElementStyle>
                            </DataGridTextColumn>
                            <DataGridCheckBoxColumn Header="Active" Binding="{Binding IsActive, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="70"/>
                            <DataGridTextColumn Header="Updated" Binding="{Binding UpdatedAt}" Width="140" IsReadOnly="True"/>
                            <DataGridTextColumn Header="Rev" Binding="{Binding Rev}" Width="60" IsReadOnly="True"/>
                        </DataGrid.Columns>
                    </DataGrid>

                    <StackPanel Grid.Row="3" Orientation="Horizontal" HorizontalAlignment="Right">
                        <Button Style="{StaticResource HotkeyButton}" Content="Refresh" Command="{Binding RefreshCommand}"/>
                        <Button Content="Close" Width="90" IsCancel="True" Margin="6,0,0,0"/>
                    </StackPanel>
                </Grid>
            </TabItem>

            <!-- Spy (integrated from SpyWindow) -->
            <TabItem Header="Spy" x:Name="tabSpy">
                <Grid Margin="8" x:Name="spyRoot">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="2*"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>

                    <StackPanel Orientation="Horizontal" Grid.Row="0" Margin="0,0,0,8">
                        <TextBlock Text="Process:" VerticalAlignment="Center" Margin="0,0,6,0"/>
                        <TextBox x:Name="spyTxtProcess" Width="160"/>
                        <TextBlock Text="Delay(ms):" VerticalAlignment="Center" Margin="8,0,4,0"/>
                        <TextBox x:Name="spyTxtDelay" Width="60" Text="1500"/>
                        <Button Content="Pick" Margin="8,0,0,0" Click="Spy_OnPick"/>
                        <TextBlock Text="Map to:" Margin="12,0,6,0" VerticalAlignment="Center"/>
                        <ComboBox x:Name="spyCmbKnown" Width="300" SelectionChanged="Spy_OnKnownSelectionChanged" SelectedValuePath="Tag">
                            <ComboBoxItem Tag="CloseWorklistButton">Close worklist button</ComboBoxItem>
                            <ComboBoxItem Tag="OpenWorklistButton">Open worklist button</ComboBoxItem>
                            <ComboBoxItem Tag="RelatedStudyList">Related studies list</ComboBoxItem>
                            <ComboBoxItem Tag="ReportCommitButton">Report commit button</ComboBoxItem>
                            <ComboBoxItem Tag="ReportInput">Report input</ComboBoxItem>
                            <ComboBoxItem Tag="ReportPane">Report pane</ComboBoxItem>
                            <ComboBoxItem Tag="ReportText">Report text</ComboBoxItem>
                            <ComboBoxItem Tag="ReportText2">Report text 2</ComboBoxItem>
                            <ComboBoxItem Tag="SearchResultsList">Search results list</ComboBoxItem>
                            <ComboBoxItem Tag="SelectedStudyInRelated">Selected study in related studies</ComboBoxItem>
                            <ComboBoxItem Tag="SelectedStudyInSearch">Selected study in search</ComboBoxItem>
                            <ComboBoxItem Tag="StudyInfoBanner">Study info banner</ComboBoxItem>
                            <ComboBoxItem Tag="StudyRemark">Study remark</ComboBoxItem>
                            <ComboBoxItem Tag="ViewerToolbar">Viewer toolbar</ComboBoxItem>
                            <ComboBoxItem Tag="ViewerWindow">Viewer window</ComboBoxItem>
                            <ComboBoxItem Tag="WorklistListsPane">Worklist lists pane</ComboBoxItem>
                            <ComboBoxItem Tag="WorklistPane">Worklist pane</ComboBoxItem>
                            <ComboBoxItem Tag="WorklistToolbar">Worklist toolbar</ComboBoxItem>
                            <ComboBoxItem Tag="WorklistViewButton">Worklist view button</ComboBoxItem>
                            <ComboBoxItem Tag="WorklistWindow">Worklist window</ComboBoxItem>
                        </ComboBox>
                        <Button Content="Map" Margin="6,0,0,0" Click="Spy_OnMapSelected"/>
                        <Button Content="Resolve" Margin="6,0,0,0" Click="Spy_OnResolveSelected"/>
                        <Button Content="Reload" Margin="6,0,0,0" Click="Spy_OnReload"/>
                        <CheckBox x:Name="spyChkEnableTree" Content="Enable Tree" Margin="12,0,0,0" IsChecked="False"/>
                    </StackPanel>

                    <Grid Grid.Row="1">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="2*"/>
                            <ColumnDefinition Width="3*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <GroupBox Grid.Column="0" Header="UI Tree" Margin="0,0,6,0">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <TreeView x:Name="spyTvAncestry" Grid.Row="0" SelectedItemChanged="Spy_OnAncestrySelected" Visibility="Collapsed"/>
                                <GroupBox Grid.Row="1" Header="Selected node" Margin="0,6,0,0">
                                    <TextBox x:Name="spyTxtNodeProps" IsReadOnly="True" TextWrapping="Wrap" AcceptsReturn="True" Height="90" VerticalScrollBarVisibility="Auto"/>
                                </GroupBox>
                            </Grid>
                        </GroupBox>
                        <GroupBox Grid.Column="1" Header="Crawl Editor">
                            <DockPanel>
                                <StackPanel Orientation="Horizontal" DockPanel.Dock="Top" Margin="0,0,0,6">
                                    <TextBlock Text="Map Method:" VerticalAlignment="Center"/>
                                    <ComboBox x:Name="spyCmbMethod" Width="150" Margin="6,0,12,0">
                                        <ComboBoxItem Tag="Chain">Chain</ComboBoxItem>
                                        <ComboBoxItem Tag="AutomationIdOnly">AutomationIdOnly</ComboBoxItem>
                                    </ComboBox>
                                    <Button Content="Validate" Click="Spy_OnValidateChain"/>
                                    <Button Content="Invoke" Margin="6,0,0,0" Click="Spy_OnInvoke"/>
                                    <Button Content="Get Text" Margin="6,0,0,0" Click="Spy_OnGetText"/>
                                    <Button Content="Get Name" Margin="6,0,0,0" Click="Spy_OnGetName"/>
                                    <Button Content="Row Data" Margin="6,0,0,0" Click="Spy_OnGetSelectedRow"/>
                                    <Button Content="Save" Margin="6,0,0,0" Click="Spy_OnSaveEdited"/>
                                </StackPanel>
                                <DataGrid x:Name="spyGridChain" AutoGenerateColumns="False" HeadersVisibility="Column" CanUserAddRows="True" CanUserDeleteRows="True" IsReadOnly="False">
                                    <DataGrid.Columns>
                                        <DataGridTextColumn Header="Name" Binding="{Binding Name}" Width="160"/>
                                        <DataGridTextColumn Header="Class" Binding="{Binding ClassName}" Width="160"/>
                                        <DataGridTextColumn Header="CtlType" Binding="{Binding ControlTypeId}" Width="80"/>
                                        <DataGridTextColumn Header="AutoId" Binding="{Binding AutomationId}" Width="160"/>
                                        <DataGridTextColumn Header="Idx" Binding="{Binding IndexAmongMatches}" Width="40"/>
                                    </DataGrid.Columns>
                                </DataGrid>
                            </DockPanel>
                        </GroupBox>
                    </Grid>

                    <GroupBox Grid.Row="2" Header="Custom Procedures" Margin="0,8,0,8">
                        <DockPanel>
                            <StackPanel Orientation="Horizontal" DockPanel.Dock="Top" Margin="0,0,0,8">
                                <TextBlock Text="PACS Method:" VerticalAlignment="Center"/>
                                <ComboBox x:Name="spyCmbProcMethod" Width="220" Margin="6,0,12,0" SelectedValuePath="Tag">
                                    <ComboBoxItem Tag="GetSelectedIdFromSearchResults">Get selected ID (search results)</ComboBoxItem>
                                    <ComboBoxItem Tag="GetSelectedNameFromSearchResults">Get selected name (search results)</ComboBoxItem>
                                    <ComboBoxItem Tag="GetSelectedSexFromSearchResults">Get selected sex (search results)</ComboBoxItem>
                                    <ComboBoxItem Tag="GetSelectedBirthDateFromSearchResults">Get selected birth date (search results)</ComboBoxItem>
                                    <ComboBoxItem Tag="GetSelectedAgeFromSearchResults">Get selected age (search results)</ComboBoxItem>
                                    <ComboBoxItem Tag="GetSelectedStudynameFromSearchResults">Get selected studyname (search results)</ComboBoxItem>
                                    <ComboBoxItem Tag="GetSelectedStudyDateTimeFromSearchResults">Get selected study datetime (search results)</ComboBoxItem>
                                    <ComboBoxItem Tag="GetSelectedRadiologistFromSearchResults">Get selected radiologist (search results)</ComboBoxItem>
                                    <ComboBoxItem Tag="GetSelectedStudyRemarkFromSearchResults">Get selected study remark (search results)</ComboBoxItem>
                                    <ComboBoxItem Tag="GetSelectedReportDateTimeFromSearchResults">Get selected report datetime (search results)</ComboBoxItem>
                                    <ComboBoxItem Tag="GetSelectedStudynameFromRelatedStudies">Get selected studyname (related)</ComboBoxItem>
                                    <ComboBoxItem Tag="GetSelectedStudyDateTimeFromRelatedStudies">Get selected study datetime (related)</ComboBoxItem>
                                    <ComboBoxItem Tag="GetSelectedRadiologistFromRelatedStudies">Get selected radiologist (related)</ComboBoxItem>
                                    <ComboBoxItem Tag="GetSelectedReportDateTimeFromRelatedStudies">Get selected report datetime (related)</ComboBoxItem>
                                    <ComboBoxItem Tag="GetCurrentPatientNumber">Get current patient number</ComboBoxItem>
                                    <ComboBoxItem Tag="GetCurrentStudyDateTime">Get current study datetime</ComboBoxItem>
                                    <ComboBoxItem Tag="GetCurrentStudyRemark">Get current study remark</ComboBoxItem>
                                    <ComboBoxItem Tag="GetCurrentFindings">Get current findings</ComboBoxItem>
                                    <ComboBoxItem Tag="GetCurrentConclusion">Get current conclusion</ComboBoxItem>
                                    <ComboBoxItem Tag="GetCurrentFindings2">Get current findings 2</ComboBoxItem>
                                    <ComboBoxItem Tag="GetCurrentConclusion2">Get current conclusion 2</ComboBoxItem>
                                </ComboBox>
                                <Button Content="Add" Click="Spy_OnAddProcRow"/>
                                <Button Content="Save" Margin="6,0,0,0" Click="Spy_OnSaveProcedure"/>
                                <Button Content="Run" Margin="6,0,0,0" Click="Spy_OnRunProcedure"/>
                            </StackPanel>
                            <DataGrid x:Name="spyGridProcSteps" AutoGenerateColumns="False" CanUserAddRows="False" CanUserDeleteRows="False">
                                <DataGrid.Columns>
                                    <DataGridTextColumn Header="Op" Binding="{Binding Op}" Width="90"/>
                                    <DataGridTextColumn Header="Arg1.Type" Binding="{Binding Arg1.Type}" Width="80"/>
                                    <DataGridTextColumn Header="Arg1" Binding="{Binding Arg1.Value}" Width="120"/>
                                    <DataGridTextColumn Header="Arg2.Type" Binding="{Binding Arg2.Type}" Width="80"/>
                                    <DataGridTextColumn Header="Arg2" Binding="{Binding Arg2.Value}" Width="120"/>
                                    <DataGridTextColumn Header="Arg3.Type" Binding="{Binding Arg3.Type}" Width="80"/>
                                    <DataGridTextColumn Header="Arg3" Binding="{Binding Arg3.Value}" Width="120"/>
                                    <DataGridTextColumn Header="OutVar" Binding="{Binding OutputVar}" Width="70"/>
                                    <DataGridTextColumn Header="Preview" Binding="{Binding OutputPreview}" Width="200"/>
                                </DataGrid.Columns>
                            </DataGrid>
                        </DockPanel>
                    </GroupBox>

                    <TextBox Grid.Row="3" x:Name="spyTxtStatus" IsReadOnly="True" Height="120" TextWrapping="Wrap" AcceptsReturn="True" VerticalScrollBarVisibility="Auto"/>
                </Grid>
            </TabItem>

            <!-- Global Phrases (admin only: account_id == 1) -->
            <TabItem Header="Global Phrases" x:Name="tabGlobalPhrases">
                <TabItem.Style>
                    <Style TargetType="TabItem" BasedOn="{StaticResource {x:Type TabItem}}">
                        <Setter Property="Visibility" Value="Collapsed"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding AccountId, RelativeSource={RelativeSource AncestorType=Window}}" Value="1">
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </TabItem.Style>
                <Grid x:Name="globalPhrasesRoot" Margin="8" Loaded="OnGlobalPhrasesTabLoaded">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>

                    <!-- Header -->
                    <TextBlock Grid.Row="0" 
                               Text="Global Phrases (Available to All Accounts)" 
                               FontSize="16" 
                               FontWeight="Bold" 
                               Foreground="{StaticResource BrushTextPrimary}"
                               Margin="0,0,0,10"/>

                    <!-- Add New Phrase Section -->
                    <Border Grid.Row="1" 
                            BorderBrush="{StaticResource BrushBorder}" 
                            BorderThickness="1" 
                            Padding="10" 
                            Margin="0,0,0,10"
                            Background="{StaticResource BrushSurfaceAlt}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>

                            <TextBlock Grid.Column="0" 
                                       Text="New Phrase:" 
                                       VerticalAlignment="Center" 
                                       Foreground="{StaticResource BrushTextPrimary}"
                                       Margin="0,0,10,0"/>

                            <TextBox Grid.Column="1" 
                                     Text="{Binding NewPhraseText, UpdateSourceTrigger=PropertyChanged}"
                                     VerticalAlignment="Center"
                                     Padding="5"
                                     Margin="0,0,10,0">
                                <TextBox.InputBindings>
                                    <KeyBinding Key="Enter" Command="{Binding AddPhraseCommand}"/>
                                </TextBox.InputBindings>
                            </TextBox>

                            <Button Grid.Column="2" 
                                    Content="Add Global Phrase" 
                                    Command="{Binding AddPhraseCommand}"
                                    Padding="10,5"
                                    MinWidth="120"/>
                        </Grid>
                    </Border>

                    <!-- Account Phrase Conversion Section -->
                    <Border Grid.Row="2"
                            BorderBrush="{StaticResource BrushBorder}"
                            BorderThickness="1"
                            Padding="10"
                            Margin="0,0,0,10"
                            Background="{StaticResource BrushSurface}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="200"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>

                            <!-- Account phrases list -->
                            <DataGrid Grid.Row="0" Grid.ColumnSpan="2"
                                      ItemsSource="{Binding AccountPhrases}"
                                      AutoGenerateColumns="False"
                                      CanUserAddRows="False" CanUserDeleteRows="False"
                                      IsReadOnly="False"
                                      Background="{StaticResource BrushSurface}"
                                      Foreground="{StaticResource BrushTextPrimary}"
                                      BorderBrush="{StaticResource BrushBorder}"
                                      RowBackground="{StaticResource BrushSurface}"
                                      AlternatingRowBackground="{StaticResource BrushSurfaceAlt}"
                                      HeadersVisibility="Column"
                                      RowHeaderWidth="0">
                                <DataGrid.Columns>
                                    <DataGridTemplateColumn Header="Select" Width="70" IsReadOnly="False">
                                        <DataGridTemplateColumn.CellTemplate>
                                            <DataTemplate>
                                                <CheckBox IsChecked="{Binding IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Center"/>
                                            </DataTemplate>
                                        </DataGridTemplateColumn.CellTemplate>
                                    </DataGridTemplateColumn>
                                    <DataGridTextColumn Header="AccountId" Binding="{Binding AccountId}" Width="100" IsReadOnly="True"/>
                                    <DataGridTextColumn Header="Text" Binding="{Binding Text}" Width="*" IsReadOnly="True"/>
                                    <DataGridTextColumn Header="Active" Binding="{Binding Active}" Width="70" IsReadOnly="True"/>
                                    <DataGridTextColumn Header="Id" Binding="{Binding Id}" Width="90" IsReadOnly="True"/>
                                </DataGrid.Columns>
                            </DataGrid>

                            <!-- Convert + Select All buttons -->
                            <StackPanel Grid.Row="1" Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,8,0,0">
                                <Button Content="Select All" Command="{Binding SelectAllAccountPhrasesCommand}"/>
                                <Button Content="Convert Selected to Global" Command="{Binding ConvertSelectedCommand}"/>
                            </StackPanel>
                        </Grid>
                    </Border>

                    <!-- Global Phrases List -->
                    <DataGrid Grid.Row="3" 
                              ItemsSource="{Binding Items}"
                              AutoGenerateColumns="False"
                              CanUserAddRows="False"
                              CanUserDeleteRows="False"
                              SelectionMode="Single"
                              HeadersVisibility="Column"
                              GridLinesVisibility="Horizontal"
                              RowHeaderWidth="0"
                              IsReadOnly="True"
                              Background="{StaticResource BrushSurface}"
                              Foreground="{StaticResource BrushTextPrimary}"
                              BorderBrush="{StaticResource BrushBorder}"
                              RowBackground="{StaticResource BrushSurface}"
                              AlternatingRowBackground="{StaticResource BrushSurfaceAlt}">
                        <DataGrid.ColumnHeaderStyle>
                            <Style TargetType="DataGridColumnHeader">
                                <Setter Property="Background" Value="{StaticResource BrushSurfaceAlt}"/>
                                <Setter Property="Foreground" Value="{StaticResource BrushTextPrimary}"/>
                                <Setter Property="BorderBrush" Value="{StaticResource BrushBorder}"/>
                                <Setter Property="BorderThickness" Value="0 0 1 1"/>
                                <Setter Property="Padding" Value="6 4"/>
                            </Style>
                        </DataGrid.ColumnHeaderStyle>
                        <DataGrid.Columns>
                            <!-- Text Column -->
                            <DataGridTextColumn Header="Phrase Text" 
                                                Binding="{Binding Text}" 
                                                Width="*" 
                                                MinWidth="200"/>

                            <!-- Active Status Column -->
                            <DataGridTextColumn Header="Active" 
                                                Binding="{Binding Active}" 
                                                Width="60"/>

                            <!-- Updated Time Column -->
                            <DataGridTextColumn Header="Updated" 
                                                Binding="{Binding UpdatedAtDisplay}" 
                                                Width="150"/>

                            <!-- Revision Column -->
                            <DataGridTextColumn Header="Rev" 
                                                Binding="{Binding Rev}" 
                                                Width="60"/>

                            <!-- Actions Column -->
                            <DataGridTemplateColumn Header="Actions" Width="100">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <Button Content="{Binding Active, Converter={StaticResource ActiveToButtonTextConverter}}"
                                                Command="{Binding ToggleCommand}"
                                                Padding="5,2"
                                                MinWidth="80"
                                                HorizontalAlignment="Center"/>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                        </DataGrid.Columns>
                    </DataGrid>

                    <!-- Status Bar -->
                    <Border Grid.Row="4" 
                            BorderBrush="{StaticResource BrushBorder}" 
                            BorderThickness="0,1,0,0" 
                            Padding="10,5" 
                            Margin="0,10,0,0"
                            Background="{StaticResource BrushSurfaceAlt}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>

                            <TextBlock Grid.Column="0"
                                       Text="Status:"
                                       FontWeight="Bold"
                                       Foreground="{StaticResource BrushTextPrimary}"
                                       Margin="0,0,10,0"
                                       VerticalAlignment="Center"/>

                            <TextBlock Grid.Column="1" 
                                       Text="{Binding StatusMessage}"
                                       Foreground="{StaticResource BrushTextSecondary}"
                                       VerticalAlignment="Center"/>

                            <Button Grid.Column="2" 
                                    Content="Refresh" 
                                    Command="{Binding RefreshCommand}"
                                    Padding="10,5"
                                    MinWidth="80"/>
                        </Grid>
                    </Border>
                </Grid>
            </TabItem>
        </TabControl>
    </Grid>
</Window>